#!/usr/bin/env python3

from mutagen.mp3 import EasyMP3
import sys, getopt, ast
from pathlib import Path
import re

def main(argv):
    try:
        opts, args = getopt.getopt(argv,"f:s:d:n:t:y:a:g:i:A:s:",["format=","separator=","delimiter="])
    except getopt.GetoptError:
        print("""
        Usage:\n
        --format, -f: Specifies the format to use for parsing the file name. Valid values: "n,a,t,y,A,g".
        The order of the values specifies in which order the metadata arguments are specified in the name of the file. (e.g.: "at" will be understood as the format "artist-title").\n\n
        --separator, -s: The separator is used to determine which character is used to separate two fields in the name of the file. Default is " - ".\n\n
        --delimiter, -d: The delimiter is used to determine which character will be used to divide the same field into two discrete entities. This is applied to the artist and the genre tag only, in case there are multiple artists and multiple genres.\n\n
        -n: used to set the track number.\n\n
        -a: used to set the artist.\n\n
        -t: used to set the title.\n\n
        -y: used to set the year.\n\n
        -A: used to set the album.\n\n
        -g: used to set the genre.\n\n
        """)
        sys.exit(2)
    
    form=[-1,0,1,2,3,-1]
    l = len(form)
    tagi = [''] * l
    sep = ' - '
    delim = ' & '
    ignore = ''
    nosplit = ''

    for opt, arg in opts:
        if opt in ("-f", "--format"):
            form = formatter(arg)
        if opt in ("-s", "--separator"):
            sep = arg
        if opt in ("-d", "--delimiter"):
            delim = ast.literal_eval(arg)
        if opt == '-n':
            tagi[0] = arg
        if opt == '-a':
            tagi[1] = arg
        if opt == '-t':
            tagi[2] = arg
        if opt == '-y':
            tagi[3] = arg
        if opt == '-A':
            tagi[4] = arg
        if opt == '-g':
            tagi[5] = arg
        if opt == '-i':
            ignore = arg
        if opt == '-s':
            nosplit = ast.literal_eval(arg)

    setMetadata(args, form, sep, delim, tagi, ignore, nosplit)

def formatter(form):
    n = form.find('n') #0 tracknumber
    a = form.find('a') #1 artist
    t = form.find('t') #2 title
    y = form.find('y') #3 year
    A = form.find('A') #4 album
    g = form.find('g') #5 genre
    out = [n, a, t, y, A, g]
    return out


def split(delimiters, string, maxsplit=0):
    if string != None or string != ['']:
        # print(f"tsest {string}")
        regexPattern = '|'.join(map(re.escape, delimiters)) #type: ignore
        return re.split(regexPattern, string, maxsplit)
    else:
        return string


def getName(filename, form, sep, delim, tagi, ignore, nosplit):
    name = Path(filename).stem
    data = name.split(sep)
    tags = tagi.copy()
    for idx, val in enumerate(form):
        if val != -1 and tags[idx] == '':
            try:
                tags[idx] =  data[val]
                if tags[idx] == ignore:
                    tags[idx] = ''
            except IndexError:
                pass
    tags[1] = split(delim, tags[1])
    tags[5] = split(delim, tags[5])
    return tags


def setMetadata(args, form=[-1,0,1,2,3,-1], sep = ' - ', delim = " & ", tagi=['']*5, ignore='', nosplit=''):
    for filename in args:
        f = EasyMP3(filename)
        tags = getName(filename, form, sep, delim, tagi, ignore, nosplit)
        print(tags)
        f["tracknumber"] = tags[0]
        f["artist"] = tags[1]
        f["title"] = tags[2]
        f["date"] = tags[3]
        f["album"] = tags[4]
        f["genre"] = tags[5]
        f.save()

if __name__ == "__main__":
    main(sys.argv[1:])

